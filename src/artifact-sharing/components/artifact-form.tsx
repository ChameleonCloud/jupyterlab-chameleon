import {
  Artifact,
  ArtifactAuthor,
  ArtifactLink,
  ArtifactProject,
  Workflow
} from '../tokens';

import { ChangeEvent } from 'react';
import * as React from 'react';

export namespace ArtifactForm {

  export interface IProps {
    artifact: Artifact;
    workflow: Workflow;
    formVisibility: object;
    formText: React.ElementRef<any>;
    onChange: (fieldName: string) => (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;
    onListChange: <T>(fieldName: string) => (list: Array<T>) => void
    onSubmit: (event: React.FormEvent) => Promise<void>;
    error: string;
  }

  export interface ListProps<E extends JSX.Element, T> {
    label?: string;
    labelInfo?: string;
    helperText?: string;
    // When a new item is added to the list, it will be generated by this function
    newComponentGenerator: (item: T, updater: (field: string) => (event: ChangeEvent<HTMLInputElement>) => void, deleter: () => void) => E;
    newObjectGenerator: () => T;
    list: Array<T>;
    artifactUpdater: (items: Array<T>) => void;
  }

  export interface AuthorProps {
    author: ArtifactAuthor;
    onFieldChange: (field: string) => (event: ChangeEvent<HTMLInputElement>) => void;
    onDelete: () => void;
  }

  export interface ProjectProps {
    project: ArtifactProject;
    onFieldChange: (field: string) => (event: ChangeEvent<HTMLInputElement>) => void;
  }

  export interface LinkProps {
    link: ArtifactLink;
    onFieldChange: (field: string) => (event: ChangeEvent<HTMLInputElement>) => void;
  }
}
